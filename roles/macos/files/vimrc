""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                   プラグインの設定
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
call plug#begin('~/.vim/plugged')

    " カラー
    Plug 'w0ng/vim-hybrid'

    " " 対応カッコ等の自動入力
    " Plug 'kana/vim-smartinput'

    " オペレーター拡張
    Plug 'kana/vim-operator-user'

    " kana/vim-operator-userを使って、クリップボードを使った置換
    Plug 'kana/vim-operator-replace'

    " インデント色付け
    Plug 'nathanaelkane/vim-indent-guides'
    let g:indent_guides_enable_on_vim_startup = 1

    " コメントON/OFFを手軽に実行
    Plug 'tomtom/tcomment_vim'

    " ファイルオープンを便利に
    Plug 'Shougo/unite.vim'

    " editorconfig
    Plug 'editorconfig/editorconfig-vim'

    " 補完
    Plug 'zxqfl/tabnine-vim'

    " ジャンプ
    Plug 'easymotion/vim-easymotion'
  	" スペースキーにリーダーを割り当て
  	let mapleader = "\<Space>"
    " s{char}{char} to move to {char}{char}
    map <leader>s <Plug>(easymotion-bd-f2)
    nmap <leader>s <Plug>(easymotion-overwin-f2)
    " Move to line
    map <leader>l <Plug>(easymotion-bd-jk)
    nmap <leader>l <Plug>(easymotion-overwin-line)

"    " ソースコード整形ツールPrettierをvimから呼び出すプラグイン
"    Plug 'prettier/vim-prettier', {
"      \ 'do': 'npm install',
"      \ 'for': ['javascript', 'typescript', 'css', 'less', 'scss', 'json', 'graphql', 'markdown', 'vue', 'yaml', 'html'] }
"
    " 閉じタグ
    Plug 'alvan/vim-closetag'
    let g:closetag_filenames = '*.html,*.vue'
    " Shortcut for closing tags, default is '>'
    let g:closetag_shortcut = '>'
    " Add > at current position without closing the current tag, default is ''
    let g:closetag_close_shortcut = '<leader>>'

    " Unite.vimで最近使ったファイルを表示できるようにする
    Plug 'Shougo/neomru.vim'

    """"""""""""""""""""""""""""""
    " Unit.vimの設定
    """"""""""""""""""""""""""""""
    " 入力モードで開始する
    " let g:unite_enable_start_insert=1
    " バッファ一覧
    noremap <C-N> :Unite buffer<CR>
    " ファイル一覧
    noremap <C-L> :Unite -buffer-name=file file<CR>
    " 最近使ったファイルの一覧
    noremap <C-Z> :Unite file_mru<CR>
    " sourcesを「今開いているファイルのディレクトリ」とする
    noremap :uff :<C-u>UniteWithBufferDir file -buffer-name=file<CR>
    " ESCキーを2回押すと終了する
    au FileType unite nnoremap <silent> <buffer> <ESC><ESC> :q<CR>
    au FileType unite inoremap <silent> <buffer> <ESC><ESC> <ESC>:q<CR>

    " ファイルをtree表示してくれる
    Plug 'scrooloose/nerdtree'
    " ファイル指定で開かれた場合はNERDTreeは表示しない
    if !argc()
        autocmd vimenter * NERDTree|normal gg3j
    endif

    Plug 'junegunn/vim-emoji'
    set completefunc=emoji#complete


    """"""""""""""""""""""""""""""
    " 以降、Python向けの設定
    """"""""""""""""""""""""""""""
    " syntax check
    " https://kashewnuts.github.io/2018/12/02/bp_advent_calender.html#w0rp-ale-linter-fixer
    Plug 'w0rp/ale'

    """"""""""""""""""""""""""""""
    " w0rp/aleの設定
    """"""""""""""""""""""""""""""
    " ファイル保存時にLinterを実行する
    let g:ale_lint_on_save = 1
    " テキスト変更時にはLinterを実行しない
    let g:ale_lint_on_text_changed = 'never'
    " Linter(コードチェックツール)の設定
    let g:ale_linters = {
    \   'python': ['flake8'],
    \}
  	let g:ale_python_flake8_options = '--ignore=E501'
    " fixer系は一旦editorconfigだけにしてみる
    " ファイル保存時にはFixerを実行する
    let g:ale_fix_on_save = 0
    " テキスト変更時にはFixerを実行しない
    let g:ale_fix_on_text_changed = 'never'
    " Fixer(コード整形ツール)の設定
    let g:ale_fixers = {
    \}
    " \   '*': ['remove_trailing_lines', 'trim_whitespace'],
    " \   'python': ['autopep8'],
    " 余分な空白があるときは警告表示
    let g:ale_warn_about_trailing_whitespace = 1
    " ALE実行時にでる目印行を常に表示
    let g:ale_sign_column_always = 1
    nmap <silent> <C-k> <Plug>(ale_previous_wrap)
    nmap <silent> <C-j> <Plug>(ale_next_wrap)

"    " Python補完
"    " https://kashewnuts.github.io/2019/01/28/move_from_jedivim_to_vimlsp.html
"    "Plug 'prabirshrestha/vim-lsp'
"    "Plug 'prabirshrestha/async.vim'

"    """"""""""""""""""""""""""""""
"    " prabirshrestha/vim-lspの設定
"    """"""""""""""""""""""""""""""
"  " デバッグ用設定
"  let g:lsp_log_verbose = 1  " デバッグ用ログを出力
"  let g:lsp_log_file = expand('~/.cache/tmp/vim-lsp.log')  " ログ出力のPATHを設定
"  " 言語用Serverの設定
"  augroup MyLsp
"    autocmd!
"    " pip install python-language-server
"    if executable('pyls')
"  	" Python用の設定を記載
"  	" workspace_configで以下の設定を記載
"  	" - pycodestyleの設定はALEと重複するので無効にする
"  	" - jediの定義ジャンプで一部無効になっている設定を有効化
"  	autocmd User lsp_setup call lsp#register_server({
"  		\ 'name': 'pyls',
"  		\ 'cmd': { server_info -> ['pyls'] },
"  		\ 'whitelist': ['python'],
"  		\ 'workspace_config': {'pyls': {'plugins': {
"  		\   'pycodestyle': {'enabled': v:false},
"  		\   'jedi_definition': {'follow_imports': v:true, 'follow_builtin_imports': v:true},}}}
"  		\})
"  	autocmd FileType python call s:configure_lsp()
"    endif
"  augroup END
"  " 言語ごとにServerが実行されたらする設定を関数化
"  function! s:configure_lsp() abort
"    setlocal omnifunc=lsp#complete  " オムニ補完を有効化
"    " LSP用にマッピング
"    nnoremap <buffer> <C-]> :<C-u>LspDefinition<CR>
"    nnoremap <buffer> gd :<C-u>LspDefinition<CR>
"    nnoremap <buffer> gD :<C-u>LspReferences<CR>
"    nnoremap <buffer> gs :<C-u>LspDocumentSymbol<CR>
"    nnoremap <buffer> gS :<C-u>LspWorkspaceSymbol<CR>
"    nnoremap <buffer> gQ :<C-u>LspDocumentFormat<CR>
"    vnoremap <buffer> gQ :LspDocumentRangeFormat<CR>
"    nnoremap <buffer> K :<C-u>LspHover<CR>
"    nnoremap <buffer> <F1> :<C-u>LspImplementation<CR>
"    nnoremap <buffer> <F2> :<C-u>LspRename<CR>
"  endfunction
"  let g:lsp_diagnostics_enabled = 0  " 警告やエラーの表示はALEに任せるのでOFFにする

call plug#end()

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                   その他の設定
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set number         " 行番号を表示する
set cursorline     "カーソル行に下線をひく
set cmdheight=2    " メッセージ表示欄を2行確保
" エディタウィンドウの末尾から2行目にステータスラインを常時表示させる
set laststatus=2
" ステータス行に表示させる情報の指定(どこからかコピペしたので細かい意味はわかっていない)
set statusline=%<%f\ %m%r%h%w%{'['.(&fenc!=''?&fenc:&enc).']['.&ff.']'}%=%l,%c%V%8P
set showmatch      " 対応する括弧を強調表示

" カーソル移動関連の設定
set backspace=indent,eol,start " Backspaceキーの影響範囲に制限を設けない
set whichwrap=b,s,h,l,<,>,[,]  " 行頭行末の左右移動で行をまたぐ
set scrolloff=8                " 上下8行の視界を確保
set sidescrolloff=16           " 左右スクロール時の視界を確保

" ファイル処理関連の設定
set confirm    " 保存されていないファイルがあるときは終了前に保存確認
set hidden     " 保存されていないファイルがあるときでも別のファイルを開くことが出来る
set autoread   "外部でファイルに変更がされた場合は読みなおす
set nobackup   " ファイル保存時にバックアップファイルを作らない
set noswapfile " ファイル編集中にスワップファイルを作らない

" 検索/置換の設定
set hlsearch   " 検索文字列をハイライトする
set incsearch  " インクリメンタルサーチを行う
set ignorecase " 大文字と小文字を区別しない
set smartcase  " 大文字と小文字が混在した言葉で検索を行った場合に限り、大文字と小文字を区別する
set wrapscan   " 最後尾まで検索を終えたら次の検索で先頭に移る

" タブ/インデントの設定
set tabstop=2     " 画面上でタブ文字が占める幅
set shiftwidth=2  " 自動インデントでずれる幅
set softtabstop=2 " 連続した空白に対してタブキーやバックスペースキーでカーソルが動く幅
set smartindent   " 改行時に入力された行の末尾に合わせて次の行のインデントを増減する
set encoding=utf-8
set fileencodings=utf-8,iso-2022-jp,euc-jp,sjis

set expandtab     " タブ入力を複数の空白入力に置き換える

" OSのクリップボードをレジスタ指定無しで Yank, Put 出来るようにする
" set clipboard=unnamed,unnamedplus

" コマンドラインの設定
" コマンドラインモードでTABキーによるファイル名補完を有効にする
set wildmenu wildmode=list:longest,full
set wildignore=*.o,*.obj,*.pyc,*.so,*.dll
" コマンドラインの履歴を10000件保存する
set history=10000

" ビープの設定
set visualbell t_vb= "ビープ音すべてを無効にする
set noerrorbells "エラーメッセージの表示時にビープを鳴らさない

" ファイル末尾の<EOL>を入れないようにする
" set binary noeol
" set nofixeol
set fixeol

" カラースキーマの指定
" colorscheme murphy
" colorscheme twilight

" check the specified plugin is installed
function s:is_plugged(name)
    if exists('g:plugs') && has_key(g:plugs, a:name) && isdirectory(g:plugs[a:name].dir)
        return 1
    else
        return 0
    endif
endfunction

if s:is_plugged("vim-hybrid")
  set background=dark
  let g:hybrid_custom_term_colors = 1
  colorscheme hybrid
endif

syntax on
" 一行あたりのシンタックスチェック列数を指定
set synmaxcol=200

" 全角スペースの表示
" http://inari.hatenablog.com/entry/2014/05/05/231307
function! ZenkakuSpace()
    highlight ZenkakuSpace cterm=underline ctermfg=lightblue guibg=darkgray
endfunction

if has('syntax')
    augroup ZenkakuSpace
    autocmd!
    autocmd ColorScheme * call ZenkakuSpace()
    autocmd VimEnter,WinEnter,BufRead * let w:m1=matchadd('ZenkakuSpace', '　')
    augroup END
    call ZenkakuSpace()
endif

" 最後のカーソル位置を復元する
if has("autocmd")
    autocmd BufReadPost *
    \ if line("'\"") > 0 && line ("'\"") <= line("$") |
        \ exe "normal! g'\"" |
    \ endif
endif

" 拡張子で別ファイル読込
" filetypeの自動検出(最後の方に書いた方がいいらしい)
filetype on

autocmd BufRead,BufNewFile *.py setfiletype python
"autocmd BufRead,BufNewFile *.rb setfiletype ruby
"autocmd BufRead,BufNewFile *.php setfiletype php
"autocmd BufRead,BufNewFile *.gp setfiletype go
